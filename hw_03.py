# ДЗ 3, функции

# # 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# # Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
# # В функции delenie ввод переменных идет в самой функции, как указано в задании.
# def delenie():
#     a = int(input('Введите делимое: '))
#     b = int(input('Введите делитель: '))
#     try:
#         print('Частное =', a / b)
#     except ZeroDivisionError:
#         print('Делить на 0 нельзя')
#
#
# delenie()

# # функция delenie1 выполняет деление 2-х переменных, а ввод переменных вынесены за пределы функции.
# def delenie1(a, b):
#     try:
#         print('Частное =', a / b)
#     except ZeroDivisionError:
#         print('Делить на 0 нельзя')
#
# a = int(input('Введите делимое: '))
# b = int(input('Введите делитель: '))
# delenie1(a, b)


# ************************************
# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Осуществить вывод данных о пользователе одной строкой.

# # Решение 1: Ввод значений атрибутов за пределами фукнции
# def catalog(name, fname, year_of_birth, city, email, phone):
#     print(f'{name} {fname}, рождены в г. {city} в {year_of_birth}г. Ваш email {email} и телефон {phone}')
#
# name = input('Введите ваше Имя: ')
# fname = input('Введите вашу Фамилию: ')
# year_of_birth = int(input('Введите ваш год рождения YYYY: '))
# city = input('Введите ваш город рождения: ')
# email = input('Введите ваш email: ')
# phone = input('Введите ваш телефон: ')
# catalog(name, fname, year_of_birth, city, email, phone)


# # Решение 2: Ввод значений атрибутов внутри фукнции
# def catalog():
#     name = input('Введите ваше Имя: ')
#     fname = input('Введите вашу Фамилию: ')
#     year_of_birth = int(input('Введите ваш год рождения YYYY: '))
#     city = input('Введите ваш город рождения: ')
#     email = input('Введите ваш email: ')
#     phone = input('Введите ваш телефон: ')
#     print(f'{name} {fname}, рождены в г. {city} в {year_of_birth}г. Ваш email {email} и телефон {phone}')
#     # return (name, fname, year_of_birth, city, email, phone)
#
# catalog()

# # ************************************
# # 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента
# # и возвращает сумму наибольших двух аргументов.
# def my_func():
#     text = (int(input('Введите число 1: ')), int(input('Введите число 2: ')), int(input('Введите число 3: ')))
#     spisok1 = sorted([text[0] + text[1], text[1] + text[2], text[0] + text[2]])
#     if spisok1[1] == spisok1[2]:
#         print(f'Max суммы одинаковые и равны по {spisok1[1]}')
#     else:
#         print(f'Max суммы равны {spisok1[1]} и {spisok1[2]}')
#
# my_func()

# # или
# def my_func():
#     text = sorted((int(input('Введите число 1: ')), int(input('Введите число 2: ')), int(input('Введите число 3: '))))
#     if text[1] == text[2]:
#         print(f'Max суммы одинаковые и равны по {text[1]+text[2]}')
#     else:
#         print(f'Max суммы равны {text[1]+text[2]} и {text[0]+text[2]}.')
#
# my_func()

# # решение через именованный список
# def my_func():
#     a = int(input('Введите число 1: '))
#     b = int(input('Введите число 2: '))
#     c = int(input('Введите число 3: '))
#     spisok=sorted([a+b, b+c, a+c])
#     spisok = sorted([a + b, b + c, a + c])
#     print(f'Max суммы равны {spisok[1]} и {spisok[2]}. (Сумма {spisok[0]} наим)')
#
# my_func()


# ************************************
# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Выполните возведение числа x в степень y. Задание реализуйте в виде функции my_func(x, y).
# При решении задания нужно обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора.
# Второй — более сложная реализация без оператора, предусматривающая использование цикла.
# Вариант 1:
# def my_func(x, y):
#     print('Возведение в степень через функцию pow =', pow(x, y))
#     print('Возведение в степень через операцию ** = ', x**y)
#
# x = int(input('Введите действительное положительное число: '))
# y = int(input('Введите целое отрицательное число: '))
# if x < 0 or y > 0:
#     print ('Вы ввели неверное число или числа')
# else:
#     my_func(x, y)

# # Вариант 2:
# def my_func(x, y):
#     if y == 0:
#         z = 1
#     else:
#         n = 1
#         while n <= abs(y):
#             z = 1/(x*x)
#             n += 1
#     print(z)
#
# x = int(input('Введите действительное положительное число: '))
# y = int(input('Введите целое отрицательное число: '))
# if x < 0 or y > 0:
#     print('Вы ввели неверное число или числа')
# else:
#     my_func(x, y)
#     print('\nпроверка через x**y =', x**y)
#     print('проверка через pow(x, y) =', pow(x, y))



# # ************************************
# # 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом.
# # При нажатии Enter должна выводиться сумма чисел.
# # Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter.
# # Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
# # Но если вместо числа вводится специальный символ, выполнение программы завершается.
# # Если специальный символ введён после нескольких чисел, то вначале нужно добавить
# # сумму этих чисел к полученной ранее сумме и после этого завершить программу.
# # ? что лучше, пополняемый список суммировать заново или ввести переменную, где хранить прошлую сумму списка и к нему прибавлять сумму нового списка?
# # Решение: ввести стоп-символ s
# # если введено s, то очиситить список от символа s, просуммировать список, сложить с прошлым, print и остановить цикл
# # иначе просуммировать список, сложить с прошлым, print и продолжить цикл ввода
# s = input('Введите стоп-символ: ')
# spisok1 = 0
# while True:
#     spisok = input('Введите числа через пробел: ').split()
#     if s in spisok:
#         spisok.remove(s)
#         spisok2 = sum(list(map(int, spisok)))
#         spisok3 = spisok1 + spisok2
#         spisok1 = spisok3
#         print('стоп, сумма', spisok3)
#         break
#     else:
#         spisok2 = sum(list(map(int, spisok)))
#         spisok3 = spisok1 + spisok2
#         spisok1 = spisok3
#         print('сумма', spisok3)


# # ************************************
# # 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв
# # и возвращающую их же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
# # Решение: не понятно, что надо сделать. Если сделать ограничение пользователю вводить только англ строчные буквы, то будет обрыв при вводе любого не англ буквы (проверка вождений символов через Unicod).
# # Пока встроено решение (из инета), что рус буквы переводятся в англ. буквы, что больше покрывает вариантивность задачи.
def int_func():
    global spisok
    from transliterate import translit
    spisok = ' '.join(input('Введите слова через пробел: ').lower().split())
    spisok = translit(spisok, language_code='ru', reversed=True)
    return spisok


print(int_func().title())



# ************************************
# 7. Продолжить работу над заданием. В программу должна попадать строка из слов,
# разделённых пробелом. Каждое слово состоит из латинских букв в нижнем регистре.
# Нужно сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Используйте написанную ранее функцию int_func().

s = "@"
print('\nДля остановки наберите ', s)
while True:
    int_func()
    if s in spisok:
        print('stop')
        break
    else:
        print(spisok.title())